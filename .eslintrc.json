{
    "env": {
        "browser": true,
        "es6": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "airbnb",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:jsx-a11y/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/typescript",

        // Prettier With Eslint
        "plugin:prettier/recommended"
    ],
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly"
    },
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "project": "./tsconfig.json",
        "ecmaVersion": 11,
        "sourceType": "module"
    },
    "plugins": ["react"],
    "settings": {
        "react": {
            "createClass": "createReactClass", // Regex for Component Factory to use,
            // default to "createReactClass"
            "pragma": "React", // Pragma to use, default to "React"
            "version": "detect" // React version. "detect" automatically picks the version you have installed.
            // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.
            // default to latest and warns if missing
            // It will default to "detect" in the future
        },
        "propWrapperFunctions": [
            // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn't set, any propTypes wrapped in a function will be skipped.
            "forbidExtraProps",
            { "property": "freeze", "object": "Object" },
            { "property": "myFavoriteWrapper" }
        ],
        "linkComponents": [
            // Components used as alternatives to <a> for linking, eg. <Link to={ url } />
            "Hyperlink",
            { "name": "Link", "linkAttribute": "to" }
        ],
        "import/resolver": {
            "node": {
                "extensions": [".js", ".jsx", ".ts", ".tsx"]
            }
        }
    },
    "rules": {
        // Eslint Rules Start

        // Possible Errors Start
        "no-await-in-loop": "error",
        "no-console": ["error", { "allow": ["warn", "error"] }],
        "no-extra-parens": "error",

        // Needs Eslint 7
        // "no-loss-of-precision": "error",

        "no-template-curly-in-string": "error",
        "require-atomic-updates": "error",
        // Possible Errors End

        // Best Practices Eslint Start
        "accessor-pairs": "error",
        // "array-callback-return": ["error", {"checkForEach": true}],
        "class-methods-use-this": "error",
        // Add Complexity Value if necessary
        "complexity": ["error"],
        "consistent-return": "error",
        "default-case": "error",

        // Needs Eslint 7
        // "default-case-last": "error",

        "curly": "error",
        // "default-param-last": "error",
        "dot-location": "error",
        "dot-notation": "error",
        "eqeqeq": ["error", "always"],
        "guard-for-in": "error",
        "max-classes-per-file": ["error", 1],
        "no-alert": "error",
        "no-caller": "error",
        "no-constructor-return": "error",
        "no-div-regex": "error",
        "no-else-return": "error",
        "no-empty-function": "error",
        "no-eq-null": "error",
        "no-eval": "error",
        "no-implied-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-floating-decimal": "error",
        "no-implicit-coercion": "error",
        "no-implicit-globals": "error",
        "no-invalid-this": "error",
        "no-iterator": "error",
        "no-labels": "error",
        "no-lone-blocks": "error",
        "no-loop-func": "error",
        // "no-magic-numbers": "warn",
        "no-multi-spaces": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-octal-escape": "error",
        "no-param-reassign": "error",
        "no-proto": "error",
        "no-return-assign": "error",
        "no-return-await": "error",
        "no-script-url": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-restricted-syntax": ["error", "SequenceExpression"],
        "no-throw-literal": "error",
        "no-unmodified-loop-condition": "error",
        "no-unused-expressions": "error",
        "no-useless-call": "error",
        "no-useless-concat": "error",
        "no-useless-return": "warn",
        "no-void": "warn",
        "no-warning-comments": "error",
        "prefer-named-capture-group": "warn",
        "prefer-promise-reject-errors": "warn",
        "radix": "warn",
        "require-await": "error",
        "require-unicode-regexp": "error",
        "wrap-iife": "error",
        "yoda": "warn",
        // Best Practices Eslint End

        // Strict Rules Start
        "strict": "error",
        // Strict Rules End

        // Variables Start
        "init-declarations": ["error", "always"],
        "no-label-var": "error",
        "no-shadow": "error",
        "no-undef-init": "error",
        "no-undefined": "error",
        "no-use-before-define": "error",
        // Variables End

        // Stylistic Start
        "array-bracket-newline": ["error"],
        "array-bracket-spacing": ["error", "never"],
        "array-element-newline": [
            "error",
            {
                "multiline": true
            }
        ],
        "block-spacing": ["error", "always"],
        "brace-style": "error",
        "camelcase": "error",
        "capitalized-comments": ["error", "always"],
        "comma-dangle": ["error", "never"],
        "comma-spacing": "error",
        "comma-style": "error",
        "computed-property-spacing": "error",
        "consistent-this": ["error", "that"],
        "eol-last": "error",
        "func-call-spacing": "error",
        "func-name-matching": [
            "error",
            "always",
            {
                "considerPropertyDescriptor": true,
                "includeCommonJSModuleExports": true
            }
        ],
        "func-names": ["error", "as-needed"],
        "function-call-argument-newline": ["error", "consistent"],
        "function-paren-newline": "error",
        "id-blacklist": ["error", "data", "err", "cb", "callback"],
        // "id-length": "warn",
        // "id-match": ["error", "^[a-z]+([A-Z][a-z]+)*$", {"properties": true,"onlyDeclarations": true}],
        "implicit-arrow-linebreak": "error",
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1,
                "VariableDeclarator": "first",
                "FunctionDeclaration": { "parameters": "first" },
                "FunctionExpression": { "parameters": "first" },
                "CallExpression": { "arguments": "first" },
                "flatTernaryExpressions": true
            }
        ],
        "jsx-quotes": "error",
        "key-spacing": ["error", { "singleLine": { "beforeColon": false, "afterColon": true } }],
        "keyword-spacing": "error",
        "line-comment-position": "error",
        "linebreak-style": "error",
        "lines-around-comment": [
            "error",
            {
                "afterBlockComment": false,
                "beforeLineComment": true,
                "allowBlockStart": true,
                "allowBlockEnd": false,
                "allowClassStart": true,
                "allowClassEnd": false,
                "allowObjectStart": true,
                "allowObjectEnd": false,
                "allowArrayStart": false,
                "allowArrayEnd": false
            }
        ],
        "lines-between-class-members": "error",
        "max-depth": "error",
        "max-len": ["error", { "code": 100 }],
        "max-lines": ["error", { "max": 150, "skipBlankLines": true }],
        "max-lines-per-function": "error",
        "max-nested-callbacks": ["error", { "max": 3 }],
        "max-params": "error",
        "max-statements": "error",
        "max-statements-per-line": "error",
        "multiline-comment-style": "error",
        // "multiline-ternary": "error",
        "new-cap": "error",
        "new-parens": "error",
        "newline-per-chained-call": "error",
        "no-array-constructor": "error",
        "no-bitwise": "error",
        "no-inline-comments": "error",
        "no-lonely-if": "error",
        "no-mixed-operators": "error",
        "no-multi-assign": "error",
        "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 1 }],
        // "no-negated-condition": "error",
        "no-nested-ternary": "error",
        "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
        "no-trailing-spaces": "error",
        "no-underscore-dangle": "error",
        "no-unneeded-ternary": "error",
        "no-whitespace-before-property": "error",
        "object-curly-newline": ["error", { "consistent": true }],
        "object-curly-spacing": ["error", "always"],
        "object-property-newline": ["error", { "allowAllPropertiesOnSameLine": false }],
        "one-var": "error",
        "one-var-declaration-per-line": "error",
        "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],
        "padded-blocks": "error",
        "padding-line-between-statements": [
            "error",
            {
                "blankLine": "always",
                "prev": ["const", "let", "var"],
                "next": "*"
            },
            {
                "blankLine": "any",
                "prev": ["const", "let", "var"],
                "next": ["const", "let", "var"]
            },
            { "blankLine": "always", "prev": "*", "next": "return" }
        ],
        "prefer-exponentiation-operator": "error",
        "prefer-object-spread": "warn",
        "quote-props": ["error", "as-needed"],
        "quotes": ["error", "double", { "avoidEscape": true }],
        "semi": "error",
        "semi-spacing": "error",
        "semi-style": ["error", "last"],
        "sort-keys": "error",
        "sort-vars": "error",
        "space-before-blocks": "error",
        "space-before-function-paren": "error",
        "space-in-parens": "error",
        "space-infix-ops": ["error", { "int32Hint": false }],
        "space-unary-ops": [
            "error",
            {
                "words": true,
                "nonwords": false
            }
        ],
        "spaced-comment": ["error", "always"],
        "switch-colon-spacing": "error",
        "template-tag-spacing": "error",
        "unicode-bom": "error",
        "wrap-regex": "error",
        // Stylistic End

        // ECMAScript 6 start
        "arrow-body-style": "error",
        "arrow-parens": "error",
        "arrow-spacing": ["error", { "before": true, "after": true }],
        "generator-star-spacing": ["error", "before"],
        "yield-star-spacing": ["error", "before"],
        "no-confusing-arrow": "error",
        "no-duplicate-imports": "error",
        "no-restricted-imports": [
            "error",
            {
                "name": "styled-components",
                "message": "Please use styled-components/macro instead."
            },
            {
                "name": "lodash",
                "message": "Please cherry pick individual module instead. Ex: import {isEqual} from 'lodash'"
            }
        ],
        "no-useless-computed-key": ["error", { "enforceForClassMembers": true }],
        "no-useless-constructor": "error",
        "no-useless-rename": "error",
        "no-var": "error",
        "object-shorthand": ["error", "always", { "avoidQuotes": true }],
        "prefer-const": "error",
        "prefer-destructuring": [
            "warn",
            {
                "array": false,
                "object": true
            },
            {
                "enforceForRenamedProperties": true
            }
        ],
        "prefer-numeric-literals": "warn",
        "prefer-rest-params": "warn",
        "prefer-spread": "warn",
        "prefer-template": "error",
        "rest-spread-spacing": "error",
        "symbol-description": "error",
        "template-curly-spacing": "error",
        // ECMAScript 6 End

        // Eslint Rules End

        // Import Rules Start
        "import/prefer-default-export": "off",
        "import/extensions": [
            "error",
            {
                "js": "never",
                "jsx": "never",
                "ts": "never",
                "tsx": "never"
            }
        ],
        // Import Rules End

        // React Rules Start
        "react/boolean-prop-naming": "warn",
        "react/button-has-type": "error",
        "react/destructuring-assignment": "warn",
        "react/forbid-component-props": "warn",
        "react/forbid-prop-types": [
            "error",
            { "checkContextTypes": true, "checkChildContextTypes": true }
        ],
        "react/no-access-state-in-setstate": "error",
        "react/no-array-index-key": "error",
        "react/no-danger": "warn",
        "react/no-multi-comp": "warn",
        "react/no-this-in-sfc": "error",
        "react/no-unsafe": ["error", { "checkAliases": true }],
        "react/no-unused-prop-types": "warn",
        "react/no-unused-state": "warn",
        "react/no-typos": "error",
        "react/prefer-es6-class": ["warn", "always"],
        "react/prefer-stateless-function": ["warn", { "ignorePureComponents": true }],
        "react/require-default-props": "warn",
        "react/self-closing-comp": "warn",
        "react/sort-comp": "warn",
        "react/state-in-constructor": ["warn", "always"],
        "react/style-prop-object": "error",
        "react/void-dom-elements-no-children": "error",

        // If you don't use typescript turn on proptype checking
        "react/prop-types": 0,
        // React Rules End

        // JSX Rules Start
        "react/jsx-boolean-value": ["error", "always"],
        "react/jsx-child-element-spacing": "error",
        "react/jsx-closing-bracket-location": "error",
        "react/jsx-closing-tag-location": "error",
        "react/jsx-curly-brace-presence": ["error", "never"],
        "react/jsx-curly-newline": "error",
        "react/jsx-equals-spacing": "error",
        "react/jsx-filename-extension": ["error", { "extensions": [".ts", ".tsx"] }],
        "react/jsx-fragments": "error",
        "react/jsx-first-prop-new-line": "error",
        "react/jsx-handler-names": "warn",
        // The below 2 are related to each other
        "react/jsx-indent": [
            "error",
            4,
            { "checkAttributes": true, "indentLogicalExpressions": true }
        ],
        "react/jsx-indent-props": ["error", "first"],

        "react/jsx-max-props-per-line": ["error"],
        "react/jsx-no-bind": "error",
        // "react/jsx-no-literals": ["error", { "ignoreProps": false }],
        "react/jsx-no-script-url": "error",
        "react/jsx-no-useless-fragment": "error",
        // "react/jsx-one-expression-per-line": ["warn", { "allow": "literal" }],
        "react/jsx-pascal-case": "error",

        // Add Exceptions only if extremely necessary
        "react/jsx-props-no-spreading": ["error", { "exceptions": [] }],
        "react/jsx-sort-props": [
            "error",
            {
                "callbacksLast": true,
                "shorthandFirst": true,
                "reservedFirst": true
            }
        ],
        "react/jsx-tag-spacing": "error",
        "react-hooks/exhaustive-deps": 0
        // JSX Rules End
    }
}
